services:
  app:
    build: ./backend
    container_name: catalojogo-backend
    ports:
      - "8080:8080"
    depends_on:
      - postgres-db
      - mongo-db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/catalojogodb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=catalojogo
      - SPRING_DATA_MONGODB_URI=mongodb://meuuser:minhasenha@mongo-db:27017/minhadb?authSource=admin
    networks:
      - app-network

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    user: root
    ports:
      - "8081:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network
    restart: always

  frontend:
    build: ./frontend
    container_name: catalojogo-frontend
    ports:
      - "4200:80"
    depends_on:
      - app
    networks:
      - app-network

  postgres-db:
    image: postgres:16-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=catalojogo
      - POSTGRES_DB=catalojogodb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "4321:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d catalojogodb" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  mongo-db:
    image: mongo:7
    container_name: mongo-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=meuuser
      - MONGO_INITDB_ROOT_PASSWORD=minhasenha
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - app-network

volumes:
  postgres_data:
  mongo_data:
  jenkins_home:

networks:
  app-network:
    driver: bridge
